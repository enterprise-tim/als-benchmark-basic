name: AsyncLocalStorage Benchmark

on:
  push:
    branches: [ main ]
  schedule:
    # Run weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch:
    inputs:
      iterations:
        description: 'Number of iterations per version (default: 2)'
        required: false
        default: '2'
        type: number
      run_memory_tests:
        description: 'Run memory profiling tests'
        required: false
        default: 'true'
        type: boolean

permissions:
  contents: write
  actions: read

jobs:
  generate-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Generate version matrix
      id: set-matrix
      run: |
        echo "🔍 Reading Node.js versions from config..."
        VERSIONS=$(node -e "
          const config = require('./config/node-versions.json');
          const activeVersions = Object.entries(config.versions)
            .filter(([key, version]) => version.active)
            .map(([key, version]) => version.exact)
            .sort((a, b) => {
              const aParts = a.split('.').map(Number);
              const bParts = b.split('.').map(Number);
              for (let i = 0; i < Math.max(aParts.length, bParts.length); i++) {
                const aPart = aParts[i] || 0;
                const bPart = bParts[i] || 0;
                if (aPart !== bPart) return aPart - bPart;
              }
              return 0;
            });
          console.log(JSON.stringify(activeVersions));
        ")
        
        echo "📋 Found versions: $VERSIONS"
        echo "matrix={\"node-version\":$VERSIONS}" >> $GITHUB_OUTPUT
        
        echo "🎯 Matrix will run ${#VERSIONS[@]} Node.js versions in parallel"

  benchmark:
    runs-on: ubuntu-latest-4-cores
    needs: generate-matrix
    strategy:
      matrix: ${{ fromJson(needs.generate-matrix.outputs.matrix) }}
      fail-fast: false
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Verify Node.js version
      run: |
        echo "Expected Node.js version: ${{ matrix.node-version }}"
        echo "Actual Node.js version: $(node --version)"
        if [ "$(node --version)" != "v${{ matrix.node-version }}" ]; then
          echo "❌ Node.js version mismatch!"
          exit 1
        fi
        echo "✅ Node.js version verified"
    
    - name: Debug matrix info
      run: |
        echo "🔍 Debug information:"
        echo "Matrix node-version: ${{ matrix.node-version }}"
        echo "Current working directory: $(pwd)"
        echo "Node.js version: $(node --version)"
        echo "NPM version: $(npm --version)"
        echo "Available scripts:"
        npm run
        echo "Matrix strategy info:"
        echo "Total matrix jobs: ${{ strategy.job-total }}"
        echo "Current matrix index: ${{ strategy.job-index }}"
    
    - name: Run multi-iteration benchmarks
      env:
        NODE_VERSION: ${{ matrix.node-version }}
      run: |
        echo "🚀 Running ${{ github.event.inputs.iterations || 2 }} iterations for Node.js ${{ matrix.node-version }}"
        echo "📊 Matrix job ${{ strategy.job-index }} of ${{ strategy.job-total }}"
        
        # Ensure results directory exists
        mkdir -p public/results/versions/node_${{ matrix.node-version }}
        echo "📁 Created results directory: public/results/versions/node_${{ matrix.node-version }}"
        
        # Run the multi-iteration benchmark
        npm run multi-iteration ${{ github.event.inputs.iterations || 2 }}
        
        # Verify results were created
        echo "📊 Benchmark completed, checking results:"
        ls -la public/results/versions/node_${{ matrix.node-version }}/ || echo "No results directory found"
    
    - name: Run memory profiling tests
      if: ${{ github.event.inputs.run_memory_tests != 'false' }}
      run: |
        echo "🧠 Running memory tests for Node.js ${{ matrix.node-version }}"
        
        # Ensure results directory exists
        mkdir -p public/results/versions/node_${{ matrix.node-version }}
        
        # Run memory test
        node --expose-gc src/memory-test.js
        
        # Copy memory results to version directory
        if [ -d "public/results/versions/node_${{ matrix.node-version }}" ]; then
          mkdir -p "public/results/versions/node_${{ matrix.node-version }}/memory"
          find public/results -name "memory_*.json" -exec cp {} "public/results/versions/node_${{ matrix.node-version }}/memory/" \;
          
          echo "📊 Memory test results:"
          ls -la "public/results/versions/node_${{ matrix.node-version }}/memory/" || echo "No memory results found"
        fi
    
    - name: Debug before upload
      run: |
        echo "🔍 Debugging before artifact upload..."
        echo "Current directory: $(pwd)"
        echo "Looking for results in public/results/versions/node_${{ matrix.node-version }}/"
        
        if [ -d "public/results/versions/node_${{ matrix.node-version }}" ]; then
          echo "✅ Version directory exists"
          echo "📁 Contents:"
          ls -la "public/results/versions/node_${{ matrix.node-version }}/"
          echo "📊 File count: $(find "public/results/versions/node_${{ matrix.node-version }}" -type f | wc -l)"
        else
          echo "❌ Version directory does not exist!"
          echo "📋 Available directories in public/results/versions/:"
          ls -la public/results/versions/ 2>/dev/null || echo "public/results/versions/ does not exist"
          echo "📋 Available directories in public/results/:"
          ls -la public/results/ 2>/dev/null || echo "public/results/ does not exist"
          echo "📋 Available directories in public/:"
          ls -la public/ 2>/dev/null || echo "public/ does not exist"
        fi
        
        # Also check for loose benchmark files
        echo "🔍 Looking for loose benchmark files..."
        find . -name "benchmark_*.json" -o -name "memory_*.json" | head -10
    
    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results-node-${{ matrix.node-version }}
        path: public/results/versions/node_${{ matrix.node-version }}/
        retention-days: 30
        if-no-files-found: warn
    
    - name: Generate performance summary
      run: |
        echo "## Performance Summary for Node.js ${{ matrix.node-version }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        VERSION_DIR="public/results/versions/node_${{ matrix.node-version }}"
        if [ -d "$VERSION_DIR" ]; then
          echo "### Benchmark Results" >> $GITHUB_STEP_SUMMARY
          echo "**Files found:** $(ls -1 $VERSION_DIR | wc -l)" >> $GITHUB_STEP_SUMMARY
          echo "**Contents:**" >> $GITHUB_STEP_SUMMARY
          ls -la "$VERSION_DIR" >> $GITHUB_STEP_SUMMARY
          
          # Show benchmark log if available
          if [ -f "$VERSION_DIR/benchmark.log" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Benchmark Log (last 10 lines):**" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            tail -10 "$VERSION_DIR/benchmark.log" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "⚠️ No results directory found for this version" >> $GITHUB_STEP_SUMMARY
        fi

  compare-versions:
    runs-on: ubuntu-latest-4-cores
    needs: [benchmark]
    if: always()
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Download all benchmark results
      uses: actions/download-artifact@v4
      with:
        path: ./downloaded-results
        pattern: 'benchmark-results-node-*'
      continue-on-error: true
    
    - name: Debug downloaded artifacts
      run: |
        echo "🔍 Debugging downloaded artifacts..."
        echo "Current directory: $(pwd)"
        
        if [ -d "./downloaded-results" ]; then
          echo "✅ Downloaded results directory exists"
          echo "📁 Contents of ./downloaded-results/:"
          ls -la ./downloaded-results/
          
          echo ""
          echo "📦 Individual artifact contents:"
          for artifact_dir in downloaded-results/*/; do
            if [ -d "$artifact_dir" ]; then
              echo "  📂 $(basename "$artifact_dir"):"
              ls -la "$artifact_dir" | head -10
              
              # Check for nested structure
              if [ -d "$artifact_dir/public" ]; then
                echo "    📁 Found public/ subdirectory:"
                find "$artifact_dir/public" -type f | head -5
              fi
            fi
          done
        else
          echo "❌ No downloaded-results directory found"
        fi
    
    - name: Setup Node.js (latest)
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Prepare results directory
      run: |
        mkdir -p public/results/versions
        
        # Copy all downloaded results to the results directory
        if [ -d "./downloaded-results" ]; then
          echo "🔍 Processing downloaded artifacts..."
          ls -la ./downloaded-results/
          
          for artifact_dir in downloaded-results/*/; do
            if [ -d "$artifact_dir" ]; then
              artifact_name=$(basename "$artifact_dir")
              echo "📦 Processing artifact: $artifact_name"
              
              # Extract version from artifact name (benchmark-results-node-X.Y.Z)
              version_name=$(echo "$artifact_name" | sed 's/benchmark-results-node-//')
              target_dir="public/results/versions/node_$version_name"
              
              echo "📁 Target directory: $target_dir"
              mkdir -p "$target_dir"
              
              # Check what's in the artifact
              echo "📋 Artifact contents:"
              ls -la "$artifact_dir"
              
              # Copy all contents from artifact to target directory
              # The artifact contains the direct contents of the version directory
              if [ -d "$artifact_dir" ] && [ "$(ls -A "$artifact_dir")" ]; then
                echo "📂 Copying direct contents from artifact..."
                cp -r "$artifact_dir"/* "$target_dir/" 2>/dev/null || true
              fi
              
              echo "✅ Copied to: $target_dir"
              ls -la "$target_dir" || echo "Target directory is empty"
            fi
          done
        else
          echo "⚠️ No downloaded artifacts found, checking for existing results..."
        fi
        
        # Check if we have any existing results
        if [ -d "public/results/versions" ] && [ "$(ls -A public/results/versions)" ]; then
          echo "Found existing benchmark results:"
          ls -la public/results/versions/
          
          # Show what's in each version directory
          for version_dir in public/results/versions/node_*; do
            if [ -d "$version_dir" ]; then
              echo "Version $version_dir contains:"
              ls -la "$version_dir"
            fi
          done
        else
          echo "No benchmark results found, creating placeholder structure..."
          mkdir -p public/results/versions/placeholder
          echo '{"message": "No benchmark data available", "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'"}' > public/results/versions/placeholder/placeholder.json
        fi
        
        echo "Final results structure:"
        find public/results/versions -type d | head -20
    
    - name: Generate version comparison report
      run: |
        echo "🔍 Generating comprehensive version comparison report..."
        
        # Debug: Check what's in the results directory
        echo "📁 Current working directory: $(pwd)"
        echo "📁 Contents of public/results/versions/:"
        ls -la public/results/versions/ || echo "Directory not found"
        
        echo "📁 Contents of results/versions/ (if exists):"
        ls -la results/versions/ 2>/dev/null || echo "Directory not found"
        
        # Note: We generate docs here for workflow validation, but don't include them in the release
        echo "🚀 Running: npm run compare-versions"
        echo "📁 Available scripts:"
        npm run
        
        if npm run compare-versions; then
          echo "📊 Comparison report generated successfully"
          echo "📁 Generated files in docs/:"
          ls -la docs/
        else
          echo "⚠️ Version comparison failed, but continuing..."
          echo "📋 npm run compare-versions failed with exit code $?"
          # Create a basic placeholder report
          mkdir -p docs
          echo "# AsyncLocalStorage Benchmark Results" > docs/index.md
          echo "" >> docs/index.md
          echo "No benchmark data available at this time." >> docs/index.md
          echo "" >> docs/index.md
          echo "Generated on: $(date -u)" >> docs/index.md
        fi
    
    - name: Generate additional reports
      run: |
        echo "📝 Generating additional performance reports..."
        # Note: We generate docs here for workflow validation, but don't include them in the release
        if npm run generate-report; then
          echo "📈 Additional reports generated successfully"
          ls -la docs/
        else
          echo "⚠️ Report generation failed, but continuing..."
          # Ensure we have at least some documentation
          if [ ! -f "docs/index.md" ]; then
            mkdir -p docs
            echo "# AsyncLocalStorage Benchmark Results" > docs/index.md
            echo "" >> docs/index.md
            echo "No benchmark data available at this time." >> docs/index.md
            echo "" >> docs/index.md
            echo "Generated on: $(date -u)" >> docs/index.md
          fi
        fi
    
    - name: Upload comparison results
      uses: actions/upload-artifact@v4
      with:
        name: version-comparison
        path: |
          public/results/
          docs/
        retention-days: 30

  create-release:
    runs-on: ubuntu-latest
    needs: [compare-versions]
    if: always() && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Download comparison results
      uses: actions/download-artifact@v4
      with:
        name: version-comparison
        path: ./release-assets
      continue-on-error: true
    
    - name: Debug release assets
      run: |
        echo "🔍 Debugging release assets before preparation..."
        echo "Current directory: $(pwd)"
        
        echo "📁 Available directories and files:"
        find . -maxdepth 3 -type d | sort
        
        if [ -d "./release-assets" ]; then
          echo "✅ Release assets directory exists"
          echo "📂 Contents of ./release-assets/:"
          find ./release-assets -type f | head -20
        else
          echo "❌ No release-assets directory found"
        fi
        
        # Check for any results directories
        echo "🔍 Looking for any results directories:"
        find . -name "*result*" -type d | head -10
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Prepare release assets
      id: prepare_release
      run: |
        echo "📦 Preparing release assets..."
        
        # Create timestamp
        TIMESTAMP=$(date -u +"%Y%m%d-%H%M%S")
        RELEASE_TAG="benchmark-results-${TIMESTAMP}"
        
        # Create release directory
        mkdir -p release-package
        
        echo "🔍 Checking for benchmark results in multiple locations..."
        
        # Check all possible locations for results
        RESULTS_FOUND=false
        
        # First check: release-assets/versions from download-artifact (this is where the data actually is!)
        if [ -d "./release-assets/versions" ] && [ "$(ls -A ./release-assets/versions)" ]; then
          echo "📂 Found results in ./release-assets/versions"
          echo "📊 Copying version directories:"
          ls -la ./release-assets/versions/
          
          mkdir -p release-package/results
          cp -r ./release-assets/versions release-package/results/
          
          # Also copy any loose files from release-assets root
          echo "📄 Looking for loose JSON files in release-assets root:"
          find ./release-assets -maxdepth 1 -name "*.json" | head -5
          find ./release-assets -maxdepth 1 -name "*.json" -exec cp {} release-package/results/ \; 2>/dev/null || true
          
          echo "✅ Copied benchmark data to release package"
          RESULTS_FOUND=true
        # Second check: release-assets with full public/results structure
        elif [ -d "./release-assets/public/results" ]; then
          echo "📂 Found results in ./release-assets/public/results"
          cp -r ./release-assets/public/results release-package/
          echo "✅ Copied benchmark data to release package"
          RESULTS_FOUND=true
        elif [ -d "./release-assets/results" ]; then
          echo "📂 Found results in ./release-assets/results"
          cp -r ./release-assets/results release-package/
          echo "✅ Copied benchmark data to release package"
          RESULTS_FOUND=true
        # Third check: local public/results (from compare-versions job)
        elif [ -d "public/results" ] && [ "$(ls -A public/results)" ]; then
          echo "📂 Found results in public/results"
          cp -r public/results release-package/
          echo "✅ Copied benchmark data to release package"
          RESULTS_FOUND=true
        # Fourth check: direct results directory
        elif [ -d "results" ] && [ "$(ls -A results)" ]; then
          echo "📂 Found results in results/"
          cp -r results release-package/
          echo "✅ Copied benchmark data to release package"
          RESULTS_FOUND=true
        fi
        
        # ALWAYS copy analysis files from docs directory if they exist (regardless of which path was used)
        if [ -d "./release-assets/docs" ]; then
          echo "📊 Found docs directory in release assets, copying analysis files:"
          ls -la ./release-assets/docs/
          
          # Copy key analysis files
          for file in "version-comparison.json" "detailed-results.json" "chart-data.json" "version-comparison.html" "index.html"; do
            if [ -f "./release-assets/docs/$file" ]; then
              echo "📋 Copying docs/$file to release"
              cp "./release-assets/docs/$file" "release-package/results/"
            fi
          done
          
          echo "✅ Copied analysis files to release package"
        else
          echo "⚠️ No docs directory found in release assets"
        fi
        
        # Also check local docs directory as backup
        if [ -d "docs" ]; then
          echo "📊 Looking for analysis files in local docs directory:"
          ls -la docs/*.json 2>/dev/null || echo "No JSON files in docs/"
          
          # Copy key analysis files
          for file in "version-comparison.json" "detailed-results.json" "chart-data.json"; do
            if [ -f "docs/$file" ]; then
              echo "📋 Copying local docs/$file to release"
              cp "docs/$file" "release-package/results/"
            fi
          done
          
          # Also copy HTML files for completeness
          for file in "version-comparison.html" "index.html"; do
            if [ -f "docs/$file" ]; then
              echo "📋 Copying local docs/$file to release"
              cp "docs/$file" "release-package/results/"
            fi
          done
          
          echo "✅ Copied local analysis files to release package"
        fi
        
        if [ "$RESULTS_FOUND" = "false" ]; then
          echo "⚠️ No benchmark results found in any expected location!"
          echo "📋 Available directories:"
          find . -maxdepth 3 -type d -name "*result*" -o -name "*benchmark*" | head -10
          
          # Create placeholder structure so release isn't completely empty
          mkdir -p release-package/results/versions
          echo '{"error": "No benchmark data found", "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'", "workflow_run": "'${{ github.run_id }}'"}' > release-package/results/no-data.json
        fi
        
        echo "📁 Copying both benchmark results and analysis files"
        
        # Verify we have actual data
        echo "📊 Checking release package contents..."
        if [ -d "release-package/results/versions" ]; then
          echo "Found results in release package:"
          ls -la release-package/results/versions/
          
          # Count actual data files
          TOTAL_FILES=0
          for version_dir in release-package/results/versions/node_*; do
            if [ -d "$version_dir" ]; then
              FILE_COUNT=$(find "$version_dir" -type f | wc -l)
              TOTAL_FILES=$((TOTAL_FILES + FILE_COUNT))
              echo "  $version_dir: $FILE_COUNT files"
            fi
          done
          echo "Total data files: $TOTAL_FILES"
        else
          echo "⚠️ No results found in release package!"
        fi
        
        # Create a summary file
        {
          echo "# AsyncLocalStorage Benchmark Results"
          echo ""
          echo "Generated on: $(date -u)"
          echo ""
          echo "## Contents"
          echo "- results/versions/ - Raw benchmark data for each Node.js version"
          echo "- results/version-comparison.json - Cross-version performance comparison"
          echo "- results/detailed-results.json - Detailed analysis and statistics"
          echo "- results/chart-data.json - Data formatted for visualization"
          echo "- results/version-comparison.html - HTML version of the comparison report"
          echo ""
          echo "## Usage"
          echo "Download this release and extract the contents to use with the async-node-stats application."
          echo "The HTML documentation is generated during site build and is not included in this release."
          echo ""
          echo "## Node.js Versions Tested"
          find release-package/results/versions -maxdepth 1 -type d -name "node_*" | sort | sed 's|.*/||' | sed 's/^/- /' || echo "- No versions found"
          echo ""
          echo "## Analysis Files"
          echo "The following analysis files are included if available:"
          for file in version-comparison.json detailed-results.json chart-data.json version-comparison.html; do
            if [ -f "release-package/results/$file" ]; then
              echo "- ✅ $file"
            else
              echo "- ❌ $file (not generated)"
            fi
          done
        } > release-package/README.md
        
        # Create a JSON manifest
        NODE_VERSIONS=$(find release-package/results/versions -maxdepth 1 -type d -name "node_*" | sort | sed 's|.*/||' | sed 's/^/    "/' | sed 's/$/",/' | sed '$ s/,$//' || echo '    "none"')
        TOTAL_SIZE=$(du -sh release-package | cut -f1)
        
        # Check which analysis files are available
        ANALYSIS_FILES=()
        for file in "version-comparison.json" "detailed-results.json" "chart-data.json" "version-comparison.html"; do
          if [ -f "release-package/results/$file" ]; then
            ANALYSIS_FILES+=("\"$file\"")
          fi
        done
        
        {
          echo "{"
          echo "  \"releaseType\": \"benchmark-results\","
          echo "  \"generatedAt\": \"$(date -u -Iseconds)\","
          echo "  \"nodeVersions\": ["
          echo "$NODE_VERSIONS"
          echo "  ],"
          echo "  \"totalSize\": \"$TOTAL_SIZE\","
          echo "  \"workflowRun\": \"${{ github.run_id }}\","
          echo "  \"dataFiles\": $TOTAL_FILES,"
          echo "  \"analysisFiles\": ["
          echo "    $(IFS=,; echo "${ANALYSIS_FILES[*]}")"
          echo "  ],"
          echo "  \"note\": \"This release contains raw benchmark data and analysis files. HTML documentation is generated during site build.\""
          echo "}"
        } > release-package/manifest.json
        
        # Create a compressed archive
        tar -czf "benchmark-results.tar.gz" -C release-package .
        
        echo "Release tag: $RELEASE_TAG"
        echo "Release assets prepared:"
        ls -la release-package/
        echo "Archive created: benchmark-results.tar.gz"
        
        # Set outputs for the next step
        echo "release_tag=${RELEASE_TAG}" >> $GITHUB_OUTPUT
        echo "archive_name=benchmark-results.tar.gz" >> $GITHUB_OUTPUT
        echo "generated_at=$(date -u -Iseconds)" >> $GITHUB_OUTPUT
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.prepare_release.outputs.release_tag }}
        release_name: "Benchmark Results - ${{ steps.prepare_release.outputs.release_tag }}"
        body: "## AsyncLocalStorage Benchmark Results\n\nThis release contains the latest benchmark results for AsyncLocalStorage performance across different Node.js versions.\n\n### What's Included\n- Raw benchmark data for each tested Node.js version\n- Memory profiling results\n- Performance metrics and timing data\n\n### What's NOT Included\n- Documentation (generated during site build)\n- Generated reports (created dynamically)\n- Static HTML/CSS files\n\n### Generated On\n${{ steps.prepare_release.outputs.generated_at }}\n\n### Workflow Run\n[${{ github.workflow }} #${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})\n\n### Usage\nDownload the `benchmark-results.tar.gz` file and extract it to use with the async-node-stats application.\n\nThe deploy workflow will automatically download and use the latest release for building the site."
        draft: false
        prerelease: false
    
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./benchmark-results.tar.gz
        asset_name: benchmark-results.tar.gz
        asset_content_type: application/gzip
