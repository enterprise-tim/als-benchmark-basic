name: Deploy to GitHub Pages

# This workflow deploys the benchmark results site to GitHub Pages.
# Note: When triggered by workflow_run, only artifacts from the main workflow run
# are accessible. Individual benchmark artifacts from matrix jobs are not available,
# so we rely on the 'version-comparison' artifact which consolidates all the data.

on:
  workflow_run:
    workflows: ["AsyncLocalStorage Benchmark"]
    types:
      - completed
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write
  actions: read

concurrency:
  group: "pages-${{ github.ref }}"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest-4-cores
    if: github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Download benchmark artifacts
      if: github.event_name == 'workflow_run'
      uses: actions/download-artifact@v4
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        run-id: ${{ github.event.workflow_run.id }}
        path: ./downloaded-artifacts
        pattern: 'benchmark-results-node-*'
      continue-on-error: true
    
    - name: Download version comparison artifact
      if: github.event_name == 'workflow_run'
      uses: actions/download-artifact@v4
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        run-id: ${{ github.event.workflow_run.id }}
        path: ./downloaded-comparison
        pattern: 'version-comparison'
      continue-on-error: true
    
    - name: Debug downloaded artifacts
      if: github.event_name == 'workflow_run'
      run: |
        echo "🔍 Debugging downloaded artifacts..."
        echo "Individual benchmark artifacts (may be empty due to matrix job artifacts not being accessible):"
        ls -la ./downloaded-artifacts/ || echo "No individual artifacts found"
        echo ""
        echo "Version comparison artifact (this should contain all the data we need):"
        ls -la ./downloaded-comparison/ || echo "No comparison artifact found"
        echo ""
        echo "Note: Individual benchmark artifacts from matrix jobs are not accessible via workflow_run trigger."
        echo "The version-comparison artifact should contain all the consolidated data."
    
    - name: Download benchmark artifacts (manual dispatch)
      if: github.event_name == 'workflow_dispatch'
      uses: actions/download-artifact@v4
      with:
        name: version-comparison
        path: ./downloaded-artifacts
    
    - name: Prepare benchmark data
      run: |
        echo "📊 Preparing benchmark data for site build..."
        
        # Create results directory structure
        mkdir -p results/versions public
        
        # Process version comparison artifact first (this should contain all the consolidated data)
        if [ -d "./downloaded-comparison" ]; then
          echo "Processing version comparison artifact (primary data source)..."
          
          # Copy the results and docs from the comparison artifact
          if [ -d "./downloaded-comparison/results" ]; then
            echo "Copying comparison results..."
            cp -r ./downloaded-comparison/results/* results/ 2>/dev/null || true
          fi
          
          if [ -d "./downloaded-comparison/docs" ]; then
            echo "Copying comparison docs..."
            cp -r ./downloaded-comparison/docs/* docs/ 2>/dev/null || true
          fi
          
          # Copy any public files (like data-index.json, version-comparison.json)
          if [ -d "./downloaded-comparison/public" ]; then
            echo "Copying public files..."
            cp -r ./downloaded-comparison/public/* public/ 2>/dev/null || true
          fi
        fi
        
        # Process downloaded benchmark artifacts (individual version results) as backup
        # Note: These may not be available due to matrix job artifact access limitations
        if [ -d "./downloaded-artifacts" ] && [ "$(ls -A downloaded-artifacts 2>/dev/null)" ]; then
          echo "Processing individual benchmark artifacts (backup data source)..."
          
          # Copy version-specific results
          for artifact in downloaded-artifacts/*/; do
            if [ -d "$artifact" ]; then
              echo "Processing artifact: $artifact"
              # Extract version from artifact name
              version_name=$(basename "$artifact" | sed 's/benchmark-results-node-//')
              target_dir="results/versions/node_$version_name"
              
              echo "Copying to: $target_dir"
              mkdir -p "$target_dir"
              cp -r "$artifact"/* "$target_dir/" 2>/dev/null || true
            fi
          done
        else
          echo "No individual benchmark artifacts available (this is expected for workflow_run triggers)"
        fi
        
        # If we still don't have results, check for existing data in the repository
        if [ ! -d "results/versions" ] || [ -z "$(ls -A results/versions 2>/dev/null)" ]; then
          echo "No benchmark data found in artifacts, checking for existing data in repository..."
          
          # Check if we have existing results in the repository
          if [ -d "results/versions" ] && [ "$(ls -A results/versions 2>/dev/null)" ]; then
            echo "Found existing benchmark data in repository"
          else
            echo "No existing data found, will build site without benchmark data"
          fi
        fi
        
        # Debug: Show the structure we have
        echo "🔍 Current data structure:"
        if [ -d "results/versions" ]; then
          echo "Results structure:"
          find results/versions -type f -name "*.json" | head -20 || echo "No JSON files found"
          
          # Show a sample version directory structure
          sample_version=$(ls results/versions | head -1)
          if [ -n "$sample_version" ]; then
            echo "Sample version directory ($sample_version):"
            ls -la "results/versions/$sample_version" || echo "Cannot list sample directory"
          fi
        fi
        
        # Generate data index for React app
        echo "🔧 Generating data index for React app..."
        if [ -d "results/versions" ] && [ "$(ls -A results/versions 2>/dev/null)" ]; then
          # Create a data index that maps versions to their latest iteration files
          node -e "
            const fs = require('fs');
            const path = require('path');
            
            const resultsDir = 'results/versions';
            const versions = {};
            
            try {
              const versionDirs = fs.readdirSync(resultsDir);
              
              for (const versionDir of versionDirs) {
                if (!versionDir.startsWith('node_')) continue;
                
                const version = versionDir.replace('node_', '');
                const versionPath = path.join(resultsDir, versionDir);
                
                // Look for the latest iteration files or fallback to root files
                let benchmarkFile = null;
                let memoryFile = null;
                
                // Check for iteration directories first
                const files = fs.readdirSync(versionPath);
                const iterations = files.filter(f => f.startsWith('iteration_')).sort().reverse();
                
                if (iterations.length > 0) {
                  // Use the latest iteration
                  const latestIteration = iterations[0];
                  const iterationPath = path.join(versionPath, latestIteration);
                  const iterationFiles = fs.readdirSync(iterationPath);
                  
                  benchmarkFile = iterationFiles.find(f => f.startsWith('benchmark_') && f.endsWith('.json'));
                  memoryFile = iterationFiles.find(f => f.startsWith('memory_') && f.endsWith('.json'));
                  
                  if (benchmarkFile) benchmarkFile = latestIteration + '/' + benchmarkFile;
                  if (memoryFile) memoryFile = latestIteration + '/' + memoryFile;
                } else {
                  // Fallback to root files
                  benchmarkFile = files.find(f => f.startsWith('benchmark_') && f.endsWith('.json'));
                  memoryFile = files.find(f => f.startsWith('memory_') && f.endsWith('.json'));
                }
                
                if (benchmarkFile && memoryFile) {
                  versions[version] = {
                    benchmark: benchmarkFile,
                    memory: memoryFile
                  };
                }
              }
              
              const dataIndex = {
                versions: versions,
                lastUpdated: new Date().toISOString()
              };
              
              fs.writeFileSync('public/data-index.json', JSON.stringify(dataIndex, null, 2));
              console.log('✅ Generated data-index.json with', Object.keys(versions).length, 'versions');
            } catch (error) {
              console.error('❌ Failed to generate data index:', error.message);
            }
          "
        fi
        
        # Generate reports from the available data
        if [ -d "results/versions" ] && [ "$(ls -A results/versions 2>/dev/null)" ]; then
          echo "Found benchmark data, generating reports..."
          
          # Update the results path for version-comparison.js to look in the right place
          npm run compare-versions || echo "Version comparison failed, continuing with build"
          npm run generate-report || echo "Report generation failed, continuing with build"
          
          # Copy generated files to public directory for React app
          if [ -f "docs/version-comparison.json" ]; then
            cp docs/version-comparison.json public/ || echo "Failed to copy version-comparison.json"
          fi
          if [ -f "docs/chart-data.json" ]; then
            cp docs/chart-data.json public/ || echo "Failed to copy chart-data.json"
          fi
        else
          echo "No benchmark data found, using existing data if available..."
        fi
        
        # Ensure we have the main site files
        if [ ! -f "docs/index.html" ]; then
          echo "No existing docs, will build fresh site..."
        fi
        
        # List what we have for debugging
        echo "📋 Final directory contents:"
        echo "Results directory:"
        ls -la results/ || echo "No results directory"
        echo "Public directory:"
        ls -la public/ || echo "No public directory"
        echo "Docs directory:"
        ls -la docs/ || echo "No docs directory"

    - name: Build React application
      run: |
        echo "🔨 Building React application..."
        
        # Ensure required directories exist before build
        mkdir -p results docs public
        
        # Build the React app
        npm run build
        
        echo "📁 Build output contents:"
        ls -la dist/
        
        # Copy benchmark results to dist for the React app
        if [ -d "results" ] && [ "$(ls -A results 2>/dev/null)" ]; then
          echo "📊 Copying benchmark results to build output..."
          cp -r results dist/ 2>/dev/null || echo "Failed to copy results, continuing..."
        else
          echo "No results directory or it's empty, skipping..."
        fi
        
        # Copy documentation files to dist
        if [ -d "docs" ] && [ "$(ls -A docs 2>/dev/null)" ]; then
          echo "📚 Copying documentation to build output..."
          cp -r docs dist/ 2>/dev/null || echo "Failed to copy docs, continuing..."
        else
          echo "No docs directory or it's empty, skipping..."
        fi
        
        # Copy public files (data-index.json, version-comparison.json, etc.) to dist root
        if [ -d "public" ] && [ "$(ls -A public 2>/dev/null)" ]; then
          echo "🌐 Copying public files to build output..."
          # Copy files to dist root, not to a public subdirectory
          for file in public/*; do
            if [ -f "$file" ]; then
              cp "$file" dist/ 2>/dev/null || echo "Failed to copy $(basename "$file"), continuing..."
            fi
          done
        else
          echo "No public directory or it's empty, skipping..."
        fi
        
        # Ensure critical data files are available for the React app
        echo "🔍 Checking for critical data files in dist:"
        if [ -f "dist/data-index.json" ]; then
          echo "✅ data-index.json found"
          head -5 dist/data-index.json || echo "Cannot preview data-index.json"
        else
          echo "❌ data-index.json missing"
        fi
        
        if [ -f "dist/version-comparison.json" ]; then
          echo "✅ version-comparison.json found"
        else
          echo "❌ version-comparison.json missing"
        fi
        
        if [ -d "dist/results/versions" ]; then
          echo "✅ results/versions directory found"
          echo "Available versions:"
          ls dist/results/versions/ | head -5 || echo "Cannot list versions"
        else
          echo "❌ results/versions directory missing"
        fi
        
        echo "🎯 Final build output:"
        ls -la dist/

    - name: Setup Pages
      uses: actions/configure-pages@v4
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: github-pages-build
        path: dist/
        retention-days: 1

  deploy:
    needs: build
    runs-on: ubuntu-latest-4-cores
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: github-pages-build
        path: ./dist
    
    - name: Setup Pages
      uses: actions/configure-pages@v4
    
    - name: Upload to GitHub Pages
      uses: actions/upload-pages-artifact@v3
      with:
        path: ./dist
    
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
