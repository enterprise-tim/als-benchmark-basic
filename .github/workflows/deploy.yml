name: Deploy React App to GitHub Pages

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write
  actions: read

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Download latest benchmark release
        run: |
          echo "📥 Downloading latest benchmark release..."
          
          # Install jq for JSON parsing
          sudo apt-get update && sudo apt-get install -y jq
          
          # Get the latest release
          LATEST_RELEASE=$(curl -s "https://api.github.com/repos/${{ github.repository }}/releases/latest" | jq -r '.tag_name // empty')
          
          if [ -n "$LATEST_RELEASE" ] && [[ "$LATEST_RELEASE" == benchmark-results-* ]]; then
            echo "Found latest benchmark release: $LATEST_RELEASE"
            
            # Download the results archive
            echo "Downloading from: https://github.com/${{ github.repository }}/releases/download/$LATEST_RELEASE/benchmark-results.tar.gz"
            if curl -L -f -o "benchmark-results.tar.gz" "https://github.com/${{ github.repository }}/releases/download/$LATEST_RELEASE/benchmark-results.tar.gz"; then
              echo "Download successful"
              echo "Downloaded file size: $(ls -lh benchmark-results.tar.gz | awk '{print $5}')"
              echo "File type: $(file benchmark-results.tar.gz)"
            else
              echo "Download failed with exit code $?"
              echo "Checking if file exists anyway..."
              ls -la benchmark-results.tar.gz 2>/dev/null || echo "No file created"
            fi
            
            if [ -f "benchmark-results.tar.gz" ]; then
              echo "Downloaded benchmark results, extracting..."
              if tar -xzf benchmark-results.tar.gz; then
                echo "Extraction successful"
              else
                echo "Extraction failed with exit code $?"
                echo "Attempting to view file contents to debug:"
                head -c 100 benchmark-results.tar.gz | hexdump -C
              fi
              
              # Verify extracted contents
              echo "Extracted archive contents:"
              ls -la .
              
              if [ -d "results" ]; then
                echo "Results directory found with contents:"
                ls -la results/
              fi
              
              echo "Benchmark results extracted successfully"
              ls -la results/versions/ 2>/dev/null || echo "No version results found"
            else
              echo "Failed to download benchmark results"
            fi
          else
            echo "No benchmark release found, using existing data if available..."
          fi
        
      - name: Prepare benchmark data
        run: |
          echo "📊 Preparing benchmark data for site build..."
          
          # Create results directory structure if it doesn't exist
          mkdir -p results/versions docs
          
          # Only generate reports if we have actual benchmark data from releases
          if [ -d "results/versions" ] && [ "$(ls -A results/versions 2>/dev/null)" ]; then
            echo "Found benchmark data from releases, generating reports..."
            npm run compare-versions || echo "Version comparison failed, continuing with build"
            npm run generate-report || echo "Report generation failed, continuing with build"
          else
            echo "No benchmark data found, creating minimal directory structure..."
            # Create empty directories to prevent build failures, but don't create placeholder data
            mkdir -p results/versions
            mkdir -p docs
            echo "✅ Directory structure prepared for build"
            echo "ℹ️  No analysis files will be generated - site will show 'no data available' message"
          fi
        
      - name: Build React app
        run: |
          echo "🔨 Building React application..."
          
          # Ensure required directories exist before build
          mkdir -p results docs public
          
          # Build the React app
          npm run build
          
          # Copy benchmark results and docs to build output
          if [ -d "results" ] && [ "$(ls -A results 2>/dev/null)" ]; then
            echo "📊 Copying benchmark results to build output..."
            cp -r results dist/ 2>/dev/null || echo "Failed to copy results, continuing..."
          fi
          
          if [ -d "docs" ] && [ "$(ls -A docs 2>/dev/null)" ]; then
            echo "📚 Copying documentation to build output..."
            cp -r docs dist/ 2>/dev/null || echo "Failed to copy docs, continuing..."
          fi
          
          # Copy only specific static files from public, excluding generated data
          if [ -d "public" ] && [ "$(ls -A public 2>/dev/null)" ]; then
            echo "🌐 Copying static public files to build output..."
            
            # Copy only non-generated files
            if [ -f "public/404.html" ]; then
              cp public/404.html dist/ 2>/dev/null || echo "Failed to copy 404.html, continuing..."
            fi
            
            if [ -f "public/CNAME" ]; then
              cp public/CNAME dist/ 2>/dev/null || echo "Failed to copy CNAME, continuing..."
            fi
            
            # Copy markdown documentation files (source files, not generated)
            if [ -d "public" ]; then
              find public -name "*.md" -exec cp {} dist/ \; 2>/dev/null || echo "Failed to copy markdown files, continuing..."
            fi
            
            echo "✅ Static public files copied successfully"
          fi
        
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./dist

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
